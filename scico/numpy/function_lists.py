""" BlockArray """
unary_ops = (  # found from dir(DeviceArray)
    "__abs__",
    "__neg__",
    "__pos__",
)

binary_ops = (  # found from dir(DeviceArray)
    "__add__",
    "__radd__",
    "__sub__",
    "__rsub__",
    "__mul__",
    "__mod__",
    "__rmul__",
    "__matmul__",
    "__rmatmul__",
    "__truediv__",
    "__rtruediv__",
    "__floordiv__",
    "__rfloordiv__",
    "__pow__",
    "__rpow__",
    "__gt__",
    "__ge__",
    "__lt__",
    "__le__",
    "__eq__",
    "__ne__",
)

""" jax.numpy """

creation_routines = (
    "empty",
    "ones",
    "zeros",
    "full",
)

mathematical_functions = (
    "sin",  # https://numpy.org/doc/stable/reference/routines.math.html#
    "cos",
    "tan",
    "arcsin",
    "arccos",
    "arctan",
    "hypot",
    "arctan2",
    "degrees",
    "radians",
    "unwrap",
    "deg2rad",
    "rad2deg",
    "sinh",
    "cosh",
    "tanh",
    "arcsinh",
    "arccosh",
    "arctanh",
    "around",
    "round_",
    "rint",
    "fix",
    "floor",
    "ceil",
    "trunc",
    "prod",
    "sum",
    "nanprod",
    "nansum",
    "cumprod",
    "cumsum",
    "nancumprod",
    "nancumsum",
    "diff",
    "ediff1d",
    "gradient",
    "cross",
    "trapz",
    "exp",
    "expm1",
    "exp2",
    "log",
    "log10",
    "log2",
    "log1p",
    "logaddexp",
    "logaddexp2",
    "i0",
    "sinc",
    "signbit",
    "copysign",
    "frexp",
    "ldexp",
    "nextafter",
    "spacing",
    "lcm",
    "gcd",
    "add",
    "reciprocal",
    "positive",
    "negative",
    "multiply",
    "divide",
    "power",
    "subtract",
    "true_divide",
    "floor_divide",
    "float_power",
    "fmod",
    "mod",
    "modf",
    "remainder",
    "divmod",
    "angle",
    "real",
    "imag",
    "conj",
    "conjugate",
    "maximum",
    "fmax",
    "amax",
    "nanmax",
    "minimum",
    "fmin",
    "amin",
    "nanmin",
    "convolve",
    "clip",
    "sqrt",
    "cbrt",
    "square",
    "absolute",
    "fabs",
    "sign",
    "heaviside",
    "nan_to_num",
    "real_if_close",
    "interp",
)

reduction_functions = ("sum", "linalg.norm")

""" numpy.testing """

testing_functions = ("testing.assert_allclose", "testing.assert_array_equal")
