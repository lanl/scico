# Install scico requirements and run pytest

name: unit tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CACHE_NUMBER: 0  # increase to reset cache manually

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/test-env

    name: ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            activate-environment: test-env
            use-mamba: true
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev_requirements.txt') }}-${{ env.CACHE_NUMBER }}
        id: cache
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y libopenblas-dev
          python -m pip install --upgrade pip
          mamba install -c conda-forge pytest pytest-cov
          pip install -r requirements.txt
          pip install -r dev_requirements.txt
          mamba install -c astra-toolbox astra-toolbox
          mamba install -c conda-forge pyyaml
          pip install "ray[tune]"
          pip install hyperopt
          pip install -e .
          which python
          which pytest
      - name: Run tests with pytest
        shell: bash -l {0}
        run: |
          which python
          ${{ matrix.prefix }}/bin/pytest --cov=scico --cov-report=xml
          ${{ matrix.prefix }}/bin/pytest --ignore-glob="*test_*.py" --doctest-modules scico
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella
          verbose: true
